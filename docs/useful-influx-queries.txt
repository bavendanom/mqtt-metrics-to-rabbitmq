from(bucket: "device-metrics-db")
  |> range(start: 2024-05-02T14:00:00Z, stop: 2024-05-04T18:00:00Z)
  |> filter(fn: (r) => r["_measurement"] == "device-temperature-metric")
  |> filter(fn: (r) => r["device-id"] =~ /69291f12-974a-4d4d-a426-567ace6d6428/)
  |> filter(fn: (r) => r._field == "temperature")

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "device-temperature-metric")
  |> filter(fn: (r) => r["_field"] == "temperature")
  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)
  |> yield(name: "mean")

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "device-temperature-metric")
  |> filter(fn: (r) => r["_field"] == "temperature")
  |> keep(columns: ["device-id", "_value", "_time"])
  |> rename(
        fn: (column) => {
            newColumnName = if column == "device-id" then "device_id" else column
            return newColumnName
        },
    )
  |> group()

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "device-temperature-metric")
  |> keep(columns: ["departmento"])
  |> unique(column: "departmento")
  |> group()
  |> map(fn: (r) => ({ foo: r["departmento"] }))

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "device-temperature-metric")
  |> filter(fn: (r) => r["_field"] == "temperature")
  |> filter(fn: (r) => r["ciudad"] =~ /${cities:regex}/)
  |> group(columns: ["ciudad"], mode: "by")
  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)
  |> last()
  |> yield(name: "mean")

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "availability-metric")
  |> filter(fn: (r) => r["_field"] == "availability")
  |> keep(columns: ["_time", "_value", "device_id"])

------------------------------------------------------------------------------------------------------------------------------------------------

import "generate"

generate.from(
    count: 10,
    fn: (n) => n,
    start: 2024-05-19T20:44:20.000Z,
    stop:  2024-05-19T20:44:30.000Z,
)

------------------------------------------------------------------------------------------------------------------------------------------------

isFieldInArray = (field, array) =>
    if length(arr: array) == 0 then true
    else contains(value: field, set: array)

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "device-temperature-metric")
  |> filter(fn: (r) => r["_field"] == "temperature")
  |> filter(fn: (r) => isFieldInArray(field: r["ciudad"], array: ["Manizales", "Neira"]))
  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)
  |> yield(name: "mean")

---------------------------------------------------------------------------------------------------

import "csv"
import "join"

deviceMetrics = from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "availability-metric")
  |> filter(fn: (r) => r["_field"] == "availability")
  |> keep(columns: ["_time", "device_id", "_value"])
  
csvData =
    "
_time,device_id,responsable
2024-05-19T22:21:06.000000000Z,Dev0000000001,Carlos
2024-05-19T22:21:07.000000000Z,Dev0000000001,Carlos
2024-05-19T22:21:08.000000000Z,Dev0000000001,Carlos
2024-05-19T22:21:09.000000000Z,Dev0000000001,Carlos
2024-05-19T22:21:10.000000000Z,Dev0000000001,Carlos
2024-05-19T22:21:11.000000000Z,Dev0000000001,Carlos
2024-05-19T22:21:12.000000000Z,Dev0000000001,Carlos
2024-05-19T22:21:13.000000000Z,Dev0000000001,Carlos
2024-05-19T22:21:06.000000000Z,Dev0000000002,Juan
2024-05-19T22:21:06.000000000Z,Dev0000000003,Pedro
2024-05-19T22:21:06.000000000Z,Dev0000000004,Camilo
"

join.left(
    left: deviceMetrics
      |> map(fn: (r) => ({r with nuevo: string(v: r["_time"]) + "___" + r["device_id"]}))
      |> group(columns: ["nuevo"]),
    right: csv.from(csv: csvData, mode: "raw")
      |> map(fn: (r) => ({r with nuevo: r["_time"] + "___" + r["device_id"]}))
      |> group(columns: ["nuevo"]),
    on: (l, r) => l["nuevo"] == r["nuevo"],
    as: (l, r) => ({l with responsable: r.responsable})
)
|> fill(column: "responsable", value: "N/A")
|> keep(columns: ["_time", "_value", "device_id", "responsable"])
|> group()
|> yield(name: "resultado_general")

https://docs.influxdata.com/flux/v0/query-data/csv/#query-csv-data-from-a-url

http://localhost:5204/report/downtimePeriods
