from(bucket: "device-metrics-db")
  |> range(start: 2024-05-02T14:00:00Z, stop: 2024-05-04T18:00:00Z)
  |> filter(fn: (r) => r["_measurement"] == "device-temperature-metric")
  |> filter(fn: (r) => r["device-id"] =~ /69291f12-974a-4d4d-a426-567ace6d6428/)
  |> filter(fn: (r) => r._field == "temperature")

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "device-temperature-metric")
  |> filter(fn: (r) => r["_field"] == "temperature")
  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)
  |> yield(name: "mean")

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "device-temperature-metric")
  |> filter(fn: (r) => r["_field"] == "temperature")
  |> keep(columns: ["device-id", "_value", "_time"])
  |> rename(
        fn: (column) => {
            newColumnName = if column == "device-id" then "device_id" else column
            return newColumnName
        },
    )
  |> group()

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "device-temperature-metric")
  |> keep(columns: ["departmento"])
  |> unique(column: "departmento")
  |> group()
  |> map(fn: (r) => ({ foo: r["departmento"] }))

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "device-temperature-metric")
  |> filter(fn: (r) => r["_field"] == "temperature")
  |> filter(fn: (r) => r["ciudad"] =~ /${cities:regex}/)
  |> group(columns: ["ciudad"], mode: "by")
  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)
  |> last()
  |> yield(name: "mean")

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "availability-metric")
  |> filter(fn: (r) => r["_field"] == "availability")
  |> keep(columns: ["_time", "_value", "device_id"])

------------------------------------------------------------------------------------------------------------------------------------------------

import "generate"

generate.from(
    count: 10,
    fn: (n) => n,
    start: 2024-05-19T20:44:20.000Z,
    stop:  2024-05-19T20:44:30.000Z,
)

------------------------------------------------------------------------------------------------------------------------------------------------

isFieldInArray = (field, array) =>
    if length(arr: array) == 0 then true
    else contains(value: field, set: array)

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "device-temperature-metric")
  |> filter(fn: (r) => r["_field"] == "temperature")
  |> filter(fn: (r) => isFieldInArray(field: r["ciudad"], array: ["Manizales", "Neira"]))
  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)
  |> yield(name: "mean")

---------------------------------------------------------------------------------------------------

import "csv"
import "join"

deviceMetrics = from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "availability-metric")
  |> filter(fn: (r) => r["_field"] == "availability")
  |> filter(fn: (r) => r["_value"] == "Parado")
  |> keep(columns: ["_time", "device_id", "_value"])
  
csvData =
    "
_time,device_id,downtime_reason
2024-05-19T22:21:06.000000000Z,Dev0000000001,Produccion
"

join.left(
    left: deviceMetrics
      |> map(fn: (r) => ({r with join_field: string(v: r["_time"]) + "___" + r["device_id"]}))
      |> group(columns: ["join_field"]),
    right: csv.from(csv: csvData, mode: "raw")
      |> map(fn: (r) => ({r with join_field: r["_time"] + "___" + r["device_id"]}))
      |> group(columns: ["join_field"]),
    on: (l, r) => l["join_field"] == r["join_field"],
    as: (l, r) => ({l with downtime_reason: r.downtime_reason})
)
|> fill(column: "downtime_reason", value: "N/A")
|> group(columns: ["device_id", "downtime_reason"])
|> reduce(fn: (r, accumulator) => ({total: 1 + accumulator.total}), identity: {total: 0})
|> pivot(rowKey: ["device_id"], columnKey: ["downtime_reason"], valueColumn: "total")
|> group()
|> yield(name: "resultado_general")

---------------------------------------------------------------------------------------------------

import "csv"
import "join"
import "experimental/http"

deviceMetrics = from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "availability-metric")
  |> filter(fn: (r) => r["_field"] == "availability")
  |> filter(fn: (r) => r["_value"] == "Parado")
  |> keep(columns: ["_time", "device_id", "_value", "stopping_reason"])
  //|> group()
  
csvData = string(v: http.get(url: "http://host.docker.internal:5204/report/downtimePeriods").body)

join.left(
    left: deviceMetrics
      |> map(fn: (r) => ({r with join_field: string(v: r["_time"]) + "___" + r["device_id"]}))
      |> group(columns: ["join_field"]),
    right: csv.from(csv: csvData, mode: "raw")
      |> map(fn: (r) => ({r with join_field: r["_time"] + "___" + r["device_id"]}))
      |> group(columns: ["join_field"]),
    on: (l, r) => l["join_field"] == r["join_field"],
    as: (l, r) => ({l with downtime_reason: r.downtime_reason})
)
|> fill(column: "downtime_reason", value: "N/A")
|> group(columns: ["device_id", "downtime_reason"])
|> reduce(fn: (r, accumulator) => ({total: 1 + accumulator.total}), identity: {total: 0})
|> pivot(rowKey: ["device_id"], columnKey: ["downtime_reason"], valueColumn: "total")
|> group()
|> yield(name: "resultado_general")

https://docs.influxdata.com/flux/v0/query-data/csv/#query-csv-data-from-a-url

---------------------------------------------------------------------------------------------------

import "csv"
import "join"
import "experimental/http"

deviceMetrics = from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "availability-metric")
  |> filter(fn: (r) => r["_field"] == "availability")
  |> filter(fn: (r) => r["_value"] == "Parado")
  |> keep(columns: ["_time", "device_id", "_value", "stopping_reason"])
  
csvData = string(v: http.get(url: "http://host.docker.internal:5204/report/downtimePeriods").body)

lookupForReasonText = (given_reason_code) =>
    if      given_reason_code == "001" then "Producción 01"
    else if given_reason_code == "002" then "Producción 02"
    else if given_reason_code == "003" then "Producción 03"
    else if given_reason_code == "004" then "Producción 04"
    else if given_reason_code == "005" then "Producción 05"
    else if given_reason_code == "006" then "Producción 06"
    else if given_reason_code == "007" then "Producción 07"
    else if given_reason_code == "008" then "Producción 08"
    else if given_reason_code == "009" then "Producción 09"
    else if given_reason_code == "010" then "Producción 10"
    else if given_reason_code == "011" then "Producción 11"
    else if given_reason_code == "012" then "Producción 12"
    else given_reason_code

join.left(
    left: deviceMetrics
      |> map(fn: (r) => ({r with join_field: string(v: r["_time"]) + "___" + r["device_id"]}))
      |> group(columns: ["join_field"]),
    right: csv.from(csv: csvData, mode: "raw")
      |> map(fn: (r) => ({r with join_field: r["_time"] + "___" + r["device_id"]}))
      |> group(columns: ["join_field"]),
    on: (l, r) => l["join_field"] == r["join_field"],
    as: (l, r) => ({l with deferred_downtime_reason: r.downtime_reason})
)
|> fill(column: "deferred_downtime_reason", value: "N/A")
|> map(fn: (r) => ({r with inferred_downtime_reason: if r.stopping_reason == "-" then r.deferred_downtime_reason else r.stopping_reason }))
|> map(fn: (r) => ({r with inferred_downtime_reason: lookupForReasonText(given_reason_code: r.inferred_downtime_reason) }))
|> group(columns: ["device_id", "inferred_downtime_reason"])
|> reduce(fn: (r, accumulator) => ({total: 1 + accumulator.total}), identity: {total: 0})
|> pivot(rowKey: ["device_id"], columnKey: ["inferred_downtime_reason"], valueColumn: "total")
|> group()
|> yield(name: "resultado_general")

---------------------------------------------------------------------------------------------------

let
    headers = [#"Content-Type" = "application/vnd.flux", #"Accept" = "application/csv", #"Authorization" = "Token EIKFDKIF1R4zs0KrvYpJPVoYiFJ4pJfvSuEjkvOf_kgDHOTuBml5R2TJXem3zEjQkJLZZ5BPYTO-clj2-e6pgQ=="],
    theQuery = "from(bucket: ""device-metrics-db"")
                |> range(start: -3h)
                |> filter(fn: (r) => r[""_measurement""] == ""availability-metric"")
                |> filter(fn: (r) => r[""_field""] == ""availability"")
                |> filter(fn: (r) => r[""_value""] == ""Parado"")
                |> keep(columns: [""_time"", ""device_id"", ""_value"", ""stopping_reason""])
                |> group()",
    postData = Text.ToBinary(theQuery),
    response = Web.Contents(
        "http://localhost:8086/api/v2/query?org=personal",
        [
            Headers = headers,
            Content = postData
        ]
    ),
    csvResponse = Csv.Document(response),
in
    csvResponse

---------------------------------------------------------------------------------------------------

// Throughput and Quality per minute

lookupForProductName = (given_product_id) =>
    if      given_product_id == "001" then "Ron Viejo de Caldas"
    else if given_product_id == "002" then "Aguardiente Amarillo"
    else if given_product_id == "003" then "Aguardiente Tapa Azul"
    else if given_product_id == "004" then "Aguardiente Nariño"
    else given_product_id

mapProductName = (forRow) =>
  ({forRow with product_name: lookupForProductName(given_product_id: forRow.product_id)})

getQualityValueForField = (forRow, fieldToCheck, defaultValue) =>
  if forRow._field == fieldToCheck then int(v: forRow._value) else defaultValue

getRunningApproveSum = (forRow, withCurrentSum) =>
  getQualityValueForField(forRow: forRow, fieldToCheck: "approved", defaultValue: 0) + withCurrentSum.approved

getRunningRejectSum = (forRow, withCurrentSum) =>
  getQualityValueForField(forRow: forRow, fieldToCheck: "rejected", defaultValue: 0) + withCurrentSum.rejected

getQualityRunningSum = (forRow, withCurrentSum) =>
  ({approved: getRunningApproveSum(forRow: forRow, withCurrentSum: withCurrentSum),
    rejected: getRunningRejectSum(forRow: forRow, withCurrentSum: withCurrentSum),
    seconds_in_min: 0.5 + withCurrentSum.seconds_in_min })

getAdjustedVelocityForRunningMinute = (velocityPerMin, seconds_in_min) =>
  float(v: velocityPerMin) / (60.0 / seconds_in_min)

getThroughput = (sumInMin, adjustedVelocityForRunningMinute) =>
  float(v: sumInMin) / adjustedVelocityForRunningMinute

mapThroughput = (forRow) => {
  adjustedVelocity = getAdjustedVelocityForRunningMinute(velocityPerMin: forRow.velocity, seconds_in_min: forRow.seconds_in_min)
  return ({forRow with approved_velocity_percentage_per_min: 100.0 * getThroughput(sumInMin: forRow.approved, adjustedVelocityForRunningMinute: adjustedVelocity),
                rejected_velocity_percentage_per_min: 100.0 * getThroughput(sumInMin: forRow.rejected, adjustedVelocityForRunningMinute: adjustedVelocity),
                overall_throughput_per_min: 100.0 * getThroughput(sumInMin: forRow.approved + forRow.rejected, adjustedVelocityForRunningMinute: adjustedVelocity),
                throughput_per_min: getThroughput(sumInMin: forRow.approved + forRow.rejected, adjustedVelocityForRunningMinute: adjustedVelocity) })
}

getQuality = (sumInMinForApproved, sumInMinForRejected) =>
  float(v: sumInMinForApproved) / (float(v: sumInMinForApproved) + float(v: sumInMinForRejected))

mapQuality = (forRow) =>
  ({forRow with overall_quality_per_min: 100.0 * getQuality(sumInMinForApproved: forRow.approved, sumInMinForRejected: forRow.rejected),
                quality_per_min: getQuality(sumInMinForApproved: forRow.approved, sumInMinForRejected: forRow.rejected) })

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "quality-metric")
  |> filter(fn: (r) => r["_field"] == "approved" or r["_field"] == "rejected")
  |> group(columns: ["device_id", "velocity", "product_id"])
  |> window(every: 1m)
  |> reduce(fn: (r, accumulator) => getQualityRunningSum(forRow: r, withCurrentSum: accumulator), identity: {approved: 0, rejected: 0, seconds_in_min: 0.0} )
  |> map(fn: (r) => mapThroughput(forRow: r))
  |> map(fn: (r) => mapQuality(forRow: r))
  |> map(fn: (r) => mapProductName(forRow: r))
  |> group(columns: ["device_id"])
  |> yield(name: "resultado")

---------------------------------------------------------------------------------------------------

// Availability per minute

getAvailabilityValueForField = (forRow, fieldToCheck, defaultValue) =>
  if forRow._value == fieldToCheck then 1 else defaultValue

getRunningUptimeSum = (forRow, withCurrentSum) => 
  getAvailabilityValueForField(forRow: forRow, fieldToCheck: "Produciendo", defaultValue: 0) + withCurrentSum.uptime

getRunningDowntimeSum = (forRow, withCurrentSum) =>
  getAvailabilityValueForField(forRow: forRow, fieldToCheck: "Parado", defaultValue: 0) + withCurrentSum.downtime

getAvailabilityRunningSum = (forRow, withCurrentSum) =>
  ({uptime: getRunningUptimeSum(forRow: forRow, withCurrentSum: withCurrentSum),
    downtime: getRunningDowntimeSum(forRow: forRow, withCurrentSum: withCurrentSum)})

getAvailability = (sumInMinForUptime, sumInMinForDowntime) =>
  float(v: sumInMinForUptime) / (float(v: sumInMinForUptime) + float(v: sumInMinForDowntime))

mapAvailability = (forRow) =>
  ({forRow with overall_availability_per_min: 100.0 * getAvailability(sumInMinForUptime: forRow.uptime, sumInMinForDowntime: forRow.downtime),
                availability_per_min: getAvailability(sumInMinForUptime: forRow.uptime, sumInMinForDowntime: forRow.downtime) })

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "availability-metric")
  |> filter(fn: (r) => r["_field"] == "availability")
  |> group(columns: ["device_id"])
  |> window(every: 1m)
  |> reduce(fn: (r, accumulator) => getAvailabilityRunningSum(forRow: r, withCurrentSum: accumulator), identity: {uptime: 0, downtime: 0} )
  |> map(fn: (r) => mapAvailability(forRow: r))
  |> group(columns: ["device_id"])
  |> yield(name: "resultado")

---------------------------------------------------------------------------------------------------

// Throughput, Availability and Quality per minute

import "join"

getAvailabilityValueForField = (forRow, fieldToCheck, defaultValue) =>
  if forRow._value == fieldToCheck then 1 else defaultValue

getRunningUptimeSum = (forRow, withCurrentSum) => 
  getAvailabilityValueForField(forRow: forRow, fieldToCheck: "Produciendo", defaultValue: 0) + withCurrentSum.uptime

getRunningDowntimeSum = (forRow, withCurrentSum) =>
  getAvailabilityValueForField(forRow: forRow, fieldToCheck: "Parado", defaultValue: 0) + withCurrentSum.downtime

getAvailabilityRunningSum = (forRow, withCurrentSum) =>
  ({uptime: getRunningUptimeSum(forRow: forRow, withCurrentSum: withCurrentSum),
    downtime: getRunningDowntimeSum(forRow: forRow, withCurrentSum: withCurrentSum)})

getAvailability = (sumInMinForUptime, sumInMinForDowntime) =>
  float(v: sumInMinForUptime) / (float(v: sumInMinForUptime) + float(v: sumInMinForDowntime))

mapAvailability = (forRow) =>
  ({forRow with overall_availability_per_min: 100.0 * getAvailability(sumInMinForUptime: forRow.uptime, sumInMinForDowntime: forRow.downtime),
                availability_per_min: getAvailability(sumInMinForUptime: forRow.uptime, sumInMinForDowntime: forRow.downtime) })

lookupForProductName = (given_product_id) =>
    if      given_product_id == "001" then "Ron Viejo de Caldas"
    else if given_product_id == "002" then "Aguardiente Amarillo"
    else if given_product_id == "003" then "Aguardiente Tapa Azul"
    else if given_product_id == "004" then "Aguardiente Nariño"
    else given_product_id

mapProductName = (forRow) =>
  ({forRow with product_name: lookupForProductName(given_product_id: forRow.product_id)})

getQualityValueForField = (forRow, fieldToCheck, defaultValue) =>
  if forRow._field == fieldToCheck then int(v: forRow._value) else defaultValue

getRunningApproveSum = (forRow, withCurrentSum) =>
  getQualityValueForField(forRow: forRow, fieldToCheck: "approved", defaultValue: 0) + withCurrentSum.approved

getRunningRejectSum = (forRow, withCurrentSum) =>
  getQualityValueForField(forRow: forRow, fieldToCheck: "rejected", defaultValue: 0) + withCurrentSum.rejected

getQualityRunningSum = (forRow, withCurrentSum) =>
  ({approved: getRunningApproveSum(forRow: forRow, withCurrentSum: withCurrentSum),
    rejected: getRunningRejectSum(forRow: forRow, withCurrentSum: withCurrentSum),
    seconds_in_min: 0.5 + withCurrentSum.seconds_in_min })

getAdjustedVelocityForRunningMinute = (velocityPerMin, seconds_in_min) =>
  float(v: velocityPerMin) / (60.0 / seconds_in_min)

getThroughput = (sumInMin, adjustedVelocityForRunningMinute) =>
  float(v: sumInMin) / adjustedVelocityForRunningMinute

mapThroughput = (forRow) => {
  adjustedVelocity = getAdjustedVelocityForRunningMinute(velocityPerMin: forRow.velocity, seconds_in_min: forRow.seconds_in_min)
  return ({forRow with approved_velocity_percentage_per_min: 100.0 * getThroughput(sumInMin: forRow.approved, adjustedVelocityForRunningMinute: adjustedVelocity),
                rejected_velocity_percentage_per_min: 100.0 * getThroughput(sumInMin: forRow.rejected, adjustedVelocityForRunningMinute: adjustedVelocity),
                overall_throughput_per_min: 100.0 * getThroughput(sumInMin: forRow.approved + forRow.rejected, adjustedVelocityForRunningMinute: adjustedVelocity),
                throughput_per_min: getThroughput(sumInMin: forRow.approved + forRow.rejected, adjustedVelocityForRunningMinute: adjustedVelocity) })
}

getQuality = (sumInMinForApproved, sumInMinForRejected) =>
  float(v: sumInMinForApproved) / (float(v: sumInMinForApproved) + float(v: sumInMinForRejected))

mapQuality = (forRow) =>
  ({forRow with overall_quality_per_min: 100.0 * getQuality(sumInMinForApproved: forRow.approved, sumInMinForRejected: forRow.rejected),
                quality_per_min: getQuality(sumInMinForApproved: forRow.approved, sumInMinForRejected: forRow.rejected) })

getEfficiencyOee = (availability, quality, throughput) =>
  availability * quality * throughput

mapEfficiencyOee = (forRow) =>
  ({forRow with overall_efficiency_per_min: 100.0 * getEfficiencyOee(availability: forRow.availability_per_min, quality: forRow.quality_per_min, throughput: forRow.throughput_per_min),
                efficiency_per_min: getEfficiencyOee(availability: forRow.availability_per_min, quality: forRow.quality_per_min, throughput: forRow.throughput_per_min) })

qualityMetrics = from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "quality-metric")
  |> filter(fn: (r) => r["_field"] == "approved" or r["_field"] == "rejected")
  |> group(columns: ["device_id", "velocity", "product_id"])
  |> window(every: 1m)
  |> reduce(fn: (r, accumulator) => getQualityRunningSum(forRow: r, withCurrentSum: accumulator), identity: {approved: 0, rejected: 0, seconds_in_min: 0.0} )
  |> map(fn: (r) => mapThroughput(forRow: r))
  |> map(fn: (r) => mapQuality(forRow: r))
  |> map(fn: (r) => mapProductName(forRow: r))
  |> group(columns: ["device_id"])

availabilityMetrics = from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "availability-metric")
  |> filter(fn: (r) => r["_field"] == "availability")
  |> group(columns: ["device_id"])
  |> window(every: 1m)
  |> reduce(fn: (r, accumulator) => getAvailabilityRunningSum(forRow: r, withCurrentSum: accumulator), identity: {uptime: 0, downtime: 0} )
  |> map(fn: (r) => mapAvailability(forRow: r))
  |> group(columns: ["device_id"])

join.left(
    left: qualityMetrics
      |> map(fn: (r) => ({r with join_field: string(v: r["_stop"]) + "___" + r["device_id"]}))
      |> group(columns: ["join_field"]),
    right: availabilityMetrics
      |> map(fn: (r) => ({r with join_field: string(v: r["_stop"]) + "___" + r["device_id"]}))
      |> group(columns: ["join_field"]),
    on: (l, r) => l["join_field"] == r["join_field"],
    as: (l, r) => ({l with uptime: r.uptime, downtime: r.downtime, overall_availability_per_min: r.overall_availability_per_min, availability_per_min: r.availability_per_min})
)
|> map(fn: (r) => mapEfficiencyOee(forRow: r))
|> map(fn: (r) => ({minuto: r._stop, dispositivo: r.device_id, oee: r.overall_efficiency_per_min}))
|> pivot(rowKey: ["minuto"], columnKey: ["dispositivo"], valueColumn: "oee")

---------------------------------------------------------------------------------------------------------------------------------------------------------

// Quality per minute

lookupForProductName = (given_product_id) =>
    if      given_product_id == "001" then "Ron Viejo de Caldas"
    else if given_product_id == "002" then "Aguardiente Amarillo"
    else if given_product_id == "003" then "Aguardiente Tapa Azul"
    else if given_product_id == "004" then "Aguardiente Nariño"
    else given_product_id

mapProductName = (forRow) =>
  ({forRow with product_name: lookupForProductName(given_product_id: forRow.product_id)})

getQualityValueForField = (forRow, fieldToCheck, defaultValue) =>
  if forRow._field == fieldToCheck then int(v: forRow._value) else defaultValue

getRunningApproveSum = (forRow, withCurrentSum) =>
  getQualityValueForField(forRow: forRow, fieldToCheck: "approved", defaultValue: 0) + withCurrentSum.approved

getRunningRejectSum = (forRow, withCurrentSum) =>
  getQualityValueForField(forRow: forRow, fieldToCheck: "rejected", defaultValue: 0) + withCurrentSum.rejected

getQualityRunningSum = (forRow, withCurrentSum) =>
  ({approved: getRunningApproveSum(forRow: forRow, withCurrentSum: withCurrentSum),
    rejected: getRunningRejectSum(forRow: forRow, withCurrentSum: withCurrentSum),
    seconds_in_min: 0.5 + withCurrentSum.seconds_in_min })

getAdjustedVelocityForRunningMinute = (velocityPerMin, seconds_in_min) =>
  float(v: velocityPerMin) / (60.0 / seconds_in_min)

getThroughput = (sumInMin, adjustedVelocityForRunningMinute) =>
  float(v: sumInMin) / adjustedVelocityForRunningMinute

mapThroughput = (forRow) => {
  adjustedVelocity = getAdjustedVelocityForRunningMinute(velocityPerMin: forRow.velocity, seconds_in_min: forRow.seconds_in_min)
  return ({forRow with approved_velocity_percentage_per_min: 100.0 * getThroughput(sumInMin: forRow.approved, adjustedVelocityForRunningMinute: adjustedVelocity),
                rejected_velocity_percentage_per_min: 100.0 * getThroughput(sumInMin: forRow.rejected, adjustedVelocityForRunningMinute: adjustedVelocity),
                overall_throughput_per_min: 100.0 * getThroughput(sumInMin: forRow.approved + forRow.rejected, adjustedVelocityForRunningMinute: adjustedVelocity),
                throughput_per_min: getThroughput(sumInMin: forRow.approved + forRow.rejected, adjustedVelocityForRunningMinute: adjustedVelocity) })
}

getQuality = (sumInMinForApproved, sumInMinForRejected) => {
  totalProduced = float(v: sumInMinForApproved) + float(v: sumInMinForRejected)
  return if totalProduced == 0 then 0.0 else float(v: sumInMinForApproved) / totalProduced
}

mapQuality = (forRow) =>
  ({forRow with overall_quality_per_min: 100.0 * getQuality(sumInMinForApproved: forRow.approved, sumInMinForRejected: forRow.rejected),
                quality_per_min: getQuality(sumInMinForApproved: forRow.approved, sumInMinForRejected: forRow.rejected) })

from(bucket: "device-metrics-db")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "quality-metric")
  |> filter(fn: (r) => r["_field"] == "approved" or r["_field"] == "rejected")
  |> group(columns: ["device_id", "velocity", "product_id"])
  |> window(every: 1m)
  |> reduce(fn: (r, accumulator) => getQualityRunningSum(forRow: r, withCurrentSum: accumulator), identity: {approved: 0, rejected: 0, seconds_in_min: 0.0} )
  |> map(fn: (r) => mapThroughput(forRow: r))
  |> map(fn: (r) => mapQuality(forRow: r))
  |> map(fn: (r) => mapProductName(forRow: r))
  |> map(fn: (r) => ({minuto: r._stop, dispositivo: r.device_id, calidad: r.overall_quality_per_min}))
  |> pivot(rowKey: ["minuto"], columnKey: ["dispositivo"], valueColumn: "calidad")
  |> yield(name: "resultado")
